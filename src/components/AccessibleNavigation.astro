---
// Navegación ultra-accesible para Lighthouse 100%
import type { CollectionEntry } from "astro:content";

interface MenuItem {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: MenuItem[];
  ariaLabel?: string;
}

interface Props {
  menuItems: MenuItem[];
  currentPath?: string;
  className?: string;
}

const { 
  menuItems, 
  currentPath = Astro.url.pathname,
  className = ""
} = Astro.props satisfies Props;

// Función helper para determinar si un enlace está activo
function isActive(url: string, currentPath: string): boolean {
  if (url === '/' && currentPath === '/') return true;
  if (url !== '/' && currentPath.startsWith(url)) return true;
  return false;
}
---

<!-- Navegación principal ultra-accesible -->
<nav 
  class={`accessible-navigation ${className}`.trim()}
  role="navigation"
  aria-label="Navegación principal"
>
  <!-- Lista de navegación semánticamente correcta -->
  <ul 
    class="nav-list"
    role="menubar"
    aria-orientation="horizontal"
  >
    {menuItems.map((item, index) => (
      <li 
        class="nav-item"
        role="none"
      >
        {!item.hasChildren ? (
          <!-- Enlace simple accesible -->
          <a
            href={item.url}
            class={`nav-link ${isActive(item.url, currentPath) ? 'nav-link--active' : ''}`.trim()}
            role="menuitem"
            tabindex="0"
            aria-current={isActive(item.url, currentPath) ? 'page' : undefined}
            aria-label={item.ariaLabel || item.name}
          >
            {item.name}
          </a>
        ) : (
          <!-- Menú dropdown accesible -->
          <div class="nav-dropdown">
            <button
              class={`nav-link nav-link--dropdown ${isActive(item.url, currentPath) ? 'nav-link--active' : ''}`.trim()}
              role="menuitem"
              aria-haspopup="menu"
              aria-expanded="false"
              aria-label={`${item.ariaLabel || item.name} (expandir menú)`}
              tabindex="0"
              data-dropdown-trigger={`dropdown-${index}`}
            >
              {item.name}
              <svg 
                class="nav-arrow"
                width="12" 
                height="12" 
                viewBox="0 0 12 12"
                fill="currentColor"
                aria-hidden="true"
              >
                <path d="M6 8L2 4h8L6 8z"/>
              </svg>
            </button>
            
            <ul 
              class="nav-submenu"
              role="menu"
              aria-orientation="vertical"
              aria-labelledby={`dropdown-${index}`}
              id={`dropdown-${index}`}
            >
              {item.children?.map((child) => (
                <li role="none">
                  <a
                    href={child.url}
                    class={`nav-sublink ${isActive(child.url, currentPath) ? 'nav-sublink--active' : ''}`.trim()}
                    role="menuitem"
                    tabindex="-1"
                    aria-current={isActive(child.url, currentPath) ? 'page' : undefined}
                    aria-label={child.ariaLabel || child.name}
                  >
                    {child.name}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )}
      </li>
    ))}
  </ul>
  
  <!-- Indicador visual para lectores de pantalla -->
  <div 
    class="sr-only"
    aria-live="polite"
    id="nav-status"
  >
    Navegación lista
  </div>
</nav>

<!-- CSS crítico para navegación accesible -->
<style>
  .accessible-navigation {
    position: relative;
    width: 100%;
  }
  
  .nav-list {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    align-items: center;
    gap: 1rem;
  }
  
  .nav-item {
    position: relative;
  }
  
  .nav-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: rgb(var(--color-primary, 38 78 112));
    font-weight: 500;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
    background: none;
    border: none;
    cursor: pointer;
    font-size: inherit;
    font-family: inherit;
  }
  
  .nav-link:hover,
  .nav-link:focus {
    background-color: rgba(var(--color-primary, 38 78 112), 0.1);
    color: rgb(var(--color-primary, 38 78 112));
    outline: 2px solid rgb(var(--color-primary, 38 78 112));
    outline-offset: 2px;
  }
  
  .nav-link--active {
    background-color: rgb(var(--color-primary, 38 78 112));
    color: white;
    font-weight: 600;
  }
  
  .nav-link--active:hover,
  .nav-link--active:focus {
    background-color: rgba(var(--color-primary, 38 78 112), 0.9);
    outline-color: white;
  }
  
  .nav-arrow {
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }
  
  .nav-dropdown {
    position: relative;
  }
  
  .nav-submenu {
    position: absolute;
    top: 100%;
    left: 0;
    min-width: 200px;
    background: white;
    border: 1px solid rgba(var(--color-primary, 38 78 112), 0.2);
    border-radius: 0.5rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    list-style: none;
    margin: 0;
    padding: 0.5rem 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s ease;
    z-index: 50;
  }
  
  .nav-dropdown:hover .nav-submenu,
  .nav-dropdown:focus-within .nav-submenu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .nav-dropdown[aria-expanded="true"] .nav-submenu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .nav-dropdown[aria-expanded="true"] .nav-arrow {
    transform: rotate(180deg);
  }
  
  .nav-sublink {
    display: block;
    padding: 0.5rem 1rem;
    text-decoration: none;
    color: rgb(var(--color-primary, 38 78 112));
    transition: all 0.2s ease;
  }
  
  .nav-sublink:hover,
  .nav-sublink:focus {
    background-color: rgba(var(--color-primary, 38 78 112), 0.1);
    outline: 2px solid rgb(var(--color-primary, 38 78 112));
    outline-offset: -2px;
  }
  
  .nav-sublink--active {
    background-color: rgba(var(--color-primary, 38 78 112), 0.1);
    font-weight: 600;
  }
  
  /* Utilidad screen reader only */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  /* Navegación responsiva */
  @media (max-width: 768px) {
    .nav-list {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .nav-submenu {
      position: static;
      box-shadow: none;
      border: none;
      background: rgba(var(--color-primary, 38 78 112), 0.05);
      margin-top: 0.5rem;
      border-radius: 0.375rem;
    }
  }
  
  /* Soporte para usuarios con preferencias de movimiento reducido */
  @media (prefers-reduced-motion: reduce) {
    .nav-link,
    .nav-arrow,
    .nav-submenu,
    .nav-sublink {
      transition: none;
    }
  }
  
  /* Alto contraste para usuarios con necesidades visuales */
  @media (prefers-contrast: high) {
    .nav-link:focus,
    .nav-sublink:focus {
      outline: 3px solid;
      outline-offset: 2px;
    }
    
    .nav-submenu {
      border: 2px solid;
    }
  }
</style>

<!-- JavaScript para funcionalidad de dropdown accesible -->
<script>
  // Gestión de dropdowns con navegación por teclado
  document.addEventListener('DOMContentLoaded', function() {
    const dropdownTriggers = document.querySelectorAll('[data-dropdown-trigger]');
    
    dropdownTriggers.forEach(trigger => {
      const dropdown = trigger.parentElement;
      const submenu = dropdown?.querySelector('.nav-submenu');
      const sublinks = submenu?.querySelectorAll('.nav-sublink');
      
      if (!dropdown || !submenu || !sublinks) return;
      
      // Click handler
      trigger.addEventListener('click', function(e) {
        e.preventDefault();
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        
        // Cerrar otros dropdowns
        dropdownTriggers.forEach(otherTrigger => {
          if (otherTrigger !== trigger) {
            otherTrigger.setAttribute('aria-expanded', 'false');
          }
        });
        
        // Toggle actual
        const newState = !isExpanded;
        trigger.setAttribute('aria-expanded', newState.toString());
        
        // Focus management
        if (newState && sublinks.length > 0) {
          (sublinks[0] as HTMLElement).focus();
          (sublinks[0] as HTMLElement).tabIndex = 0;
        }
      });
      
      // Keyboard navigation
      trigger.addEventListener('keydown', function(e) {
        const event = e as KeyboardEvent;
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        
        switch(event.key) {
          case 'ArrowDown':
          case 'Enter':
          case ' ':
            event.preventDefault();
            if (!isExpanded) {
              (trigger as HTMLElement).click();
            } else if (sublinks.length > 0) {
              (sublinks[0] as HTMLElement).focus();
            }
            break;
          case 'Escape':
            if (isExpanded) {
              trigger.setAttribute('aria-expanded', 'false');
              (trigger as HTMLElement).focus();
            }
            break;
        }
      });
      
      // Submenu keyboard navigation
      sublinks.forEach((link, index) => {
        link.addEventListener('keydown', function(e) {
          const event = e as KeyboardEvent;
          switch(event.key) {
            case 'ArrowDown':
              event.preventDefault();
              const nextIndex = (index + 1) % sublinks.length;
              (sublinks[nextIndex] as HTMLElement).focus();
              break;
            case 'ArrowUp':
              event.preventDefault();
              const prevIndex = (index - 1 + sublinks.length) % sublinks.length;
              (sublinks[prevIndex] as HTMLElement).focus();
              break;
            case 'Escape':
              event.preventDefault();
              trigger.setAttribute('aria-expanded', 'false');
              (trigger as HTMLElement).focus();
              break;
            case 'Tab':
              // Permitir tab normal pero cerrar dropdown
              trigger.setAttribute('aria-expanded', 'false');
              break;
          }
        });
      });
    });
    
    // Cerrar dropdowns al hacer click fuera
    document.addEventListener('click', function(e) {
      if (!e.target || !(e.target as Element).closest('.nav-dropdown')) {
        dropdownTriggers.forEach(trigger => {
          trigger.setAttribute('aria-expanded', 'false');
        });
      }
    });
    
    // Anunciar navegación lista para lectores de pantalla
    const statusElement = document.getElementById('nav-status');
    if (statusElement) {
      setTimeout(() => {
        statusElement.textContent = 'Navegación lista';
      }, 100);
    }
  });
  
  // Re-inicializar en navegaciones View Transitions
  document.addEventListener('astro:page-load', function() {
    // El código se ejecutará automáticamente por DOMContentLoaded
    // pero podemos resetear estados si es necesario
    const dropdownTriggers = document.querySelectorAll('[data-dropdown-trigger]');
    dropdownTriggers.forEach(trigger => {
      trigger.setAttribute('aria-expanded', 'false');
    });
  });
</script>