---
interface Props {
  src: string;
  alt: string;
  sizes?: string;
  class?: string;
  loading?: "lazy" | "eager";
  decoding?: "async" | "sync" | "auto";
  widths?: number[];
  formats?: string[];
}

const {
  src,
  alt,
  sizes = "(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw",
  class: className = "",
  loading = "lazy",
  decoding = "async",
} = Astro.props;

// Future enhancement: Generate srcset for different widths
// function generateSrcSet(baseSrc: string, widths: number[]): string {
//   const baseUrl = baseSrc.replace(/\.[^/.]+$/, ""); // Remove extension
//   const extension = baseSrc.match(/\.[^/.]+$/)?.[0] || '.jpg';
//
//   return widths
//     .map(width => `${baseUrl}-${width}w${extension} ${width}w`)
//     .join(', ');
// }

// For now, we'll use the original images with responsive sizing
// In a real implementation, you'd generate multiple sizes during build
---

<picture class={className}>
  <!-- Future: Add WebP/AVIF sources when available -->
  <!-- 
  <source 
    srcset={generateSrcSet(src.replace(/\.[^/.]+$/, '.webp'), widths)}
    type="image/webp"
    sizes={sizes}
  />
  <source 
    srcset={generateSrcSet(src.replace(/\.[^/.]+$/, '.avif'), widths)}
    type="image/avif"
    sizes={sizes}
  />
  -->

  <img
    src={src}
    alt={alt}
    loading={loading}
    decoding={decoding}
    sizes={sizes}
    class="w-full h-full object-cover"
    style="aspect-ratio: 16/9;"
  />
</picture>

<style>
  picture {
    display: block;
    overflow: hidden;
  }

  img {
    transition: transform 0.3s ease-in-out;
  }

  picture:hover img {
    transform: scale(1.05);
  }
</style>
