---
// src/components/OptimizedHeroImage.astro
// CRITICAL COMPONENT FOR LCP OPTIMIZATION

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  priority?: boolean;
  sizes?: string;
  class?: string;
}

const {
  src,
  alt,
  width = 1920,
  height = 1080,
  priority = true,
  sizes = "(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 70vw",
  class: className = "",
} = Astro.props satisfies Props;

// Generate responsive image URLs
const mobileAvif = `/camion/optimized/${src}-mobile.avif`;
const mobileWebp = `/camion/optimized/${src}-mobile.webp`;
const mobileJpeg = `/camion/optimized/${src}-mobile.jpg`;

const desktopAvif = `/camion/optimized/${src}.avif`;
const desktopWebp = `/camion/optimized/${src}.webp`;
const desktopJpeg = `/camion/optimized/${src}.jpg`;

// Calculate aspect ratio for CLS prevention
const aspectRatio = (height / width) * 100;
---

<!-- OPTIMIZED PICTURE ELEMENT FOR CORE WEB VITALS -->
<picture class={`optimized-hero-image ${className}`}>
  <!-- Mobile sources (max-width: 768px) -->
  <source
    media="(max-width: 768px)"
    srcset={mobileAvif}
    type="image/avif"
    width="768"
    height="432"
  />
  <source
    media="(max-width: 768px)"
    srcset={mobileWebp}
    type="image/webp"
    width="768"
    height="432"
  />

  <!-- Desktop sources (min-width: 769px) -->
  <source
    media="(min-width: 769px)"
    srcset={desktopAvif}
    type="image/avif"
    width={width}
    height={height}
  />
  <source
    media="(min-width: 769px)"
    srcset={desktopWebp}
    type="image/webp"
    width={width}
    height={height}
  />

  <!-- Fallback image -->
  <img
    src={desktopJpeg}
    alt={alt}
    width={width}
    height={height}
    loading={priority ? "eager" : "lazy"}
    decoding={priority ? "sync" : "async"}
    fetchpriority={priority ? "high" : "auto"}
    sizes={sizes}
    style={`aspect-ratio: ${width}/${height};`}
    class="w-full h-full object-cover"
  />
</picture>

<style>
  .optimized-hero-image {
    display: block;
    width: 100%;
    height: 100%;
    position: relative;
  }

  .optimized-hero-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    /* Prevent layout shift */
    aspect-ratio: attr(width) / attr(height);
  }

  /* Performance optimizations */
  @media (prefers-reduced-motion: reduce) {
    .optimized-hero-image img {
      /* Disable animations for better performance */
      animation: none;
      transition: none;
    }
  }

  /* Critical CSS for above-the-fold loading */
  .optimized-hero-image {
    /* Reserve space to prevent CLS */
    min-height: 200px;
  }

  @media (min-width: 768px) {
    .optimized-hero-image {
      min-height: 400px;
    }
  }

  @media (min-width: 1024px) {
    .optimized-hero-image {
      min-height: 500px;
    }
  }
</style>

<script>
  // Add intersection observer for non-critical images
  document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll(
      '.optimized-hero-image img[loading="lazy"]'
    );

    if ("IntersectionObserver" in window) {
      const imageObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;
              // Preload next format when image becomes visible
              if (img.nextElementSibling) {
                const link = document.createElement("link");
                link.rel = "prefetch";
                link.href = img.src;
                document.head.appendChild(link);
              }
              imageObserver.unobserve(img);
            }
          });
        },
        { rootMargin: "50px" }
      );

      images.forEach((img) => imageObserver.observe(img));
    }
  });
</script>
