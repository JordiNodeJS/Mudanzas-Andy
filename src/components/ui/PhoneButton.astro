---
interface Props {
  phone: string;
  text: string;
  variant?: "primary" | "secondary";
  size?: "sm" | "md" | "lg";
  icon?: string;
  fullWidth?: boolean;
}

const {
  phone,
  text,
  variant = "primary",
  size = "md",
  icon = "ðŸ“ž",
  fullWidth = false,
} = Astro.props;

const baseClasses =
  "font-bold rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 flex items-center justify-center gap-3 whitespace-nowrap";

const variantClasses = {
  primary: "bg-[#FAE360] hover:bg-[#f0d84a] text-[#264e70]",
  secondary: "bg-[#679186] hover:bg-[#5a7a6f] text-white",
};

const sizeClasses = {
  sm: "py-2 px-4 text-sm",
  md: "py-3 lg:py-4 px-6 lg:px-8 text-base lg:text-lg",
  lg: "py-4 px-8 text-lg",
};

const widthClasses = fullWidth ? "w-full sm:w-auto max-w-sm" : "w-auto";

// Clean phone number for tel: link (remove spaces, parentheses, hyphens)
const cleanPhone = phone.replace(/\s+/g, "").replace(/[\(\)\-]/g, "");
// Add +34 prefix if not present for Spanish numbers
const formattedPhone = cleanPhone.startsWith("+")
  ? cleanPhone
  : `+34${cleanPhone}`;

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${widthClasses}`;
---

<a
  href={`tel:${formattedPhone}`}
  class={classes}
  aria-label={`Llamar al ${phone}`}
>
  <span class="text-lg lg:text-xl">{icon}</span>
  <span class="break-words hyphens-auto">{text}</span>
</a>
