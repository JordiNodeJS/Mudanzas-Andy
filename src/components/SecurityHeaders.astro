---
// Componente de Encabezados de Seguridad para Best Practices 100%
interface Props {
  enableCSP?: boolean;
  enableHSTS?: boolean;
  enableFrameOptions?: boolean;
  enableContentTypeOptions?: boolean;
  enableReferrerPolicy?: boolean;
  cspDirectives?: Record<string, string>;
}

const {
  enableCSP = true,
  enableHSTS = true,
  enableFrameOptions = true,
  enableContentTypeOptions = true,
  enableReferrerPolicy = true,
  cspDirectives = {},
} = Astro.props satisfies Props;

// Content Security Policy optimizada para Lighthouse
const defaultCSP = {
  "default-src": "'self'",
  "script-src":
    "'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com https://tagmanager.google.com https://cdn.emailjs.com",
  "style-src":
    "'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com",
  "font-src": "'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com",
  "img-src": "'self' data: blob: https: http:",
  "connect-src":
    "'self' https://api.emailjs.com https://www.google-analytics.com https://analytics.google.com https://wa.me https://api.whatsapp.com",
  "frame-src": "'none'",
  "object-src": "'none'",
  "base-uri": "'self'",
  "form-action": "'self' https://api.emailjs.com",
  "frame-ancestors": "'none'",
  "upgrade-insecure-requests": "",
};

const finalCSP = { ...defaultCSP, ...cspDirectives };
const cspHeader = Object.entries(finalCSP)
  .map(([key, value]) => `${key} ${value}`)
  .join("; ");

// Security Headers para _headers (Netlify/Vercel)
const securityHeaders = [
  enableHSTS &&
    "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload",
  enableFrameOptions && "X-Frame-Options: DENY",
  enableContentTypeOptions && "X-Content-Type-Options: nosniff",
  "X-XSS-Protection: 1; mode=block",
  enableReferrerPolicy && "Referrer-Policy: strict-origin-when-cross-origin",
  "Permissions-Policy: geolocation=(), microphone=(), camera=()",
  enableCSP && `Content-Security-Policy: ${cspHeader}`,
  "Cross-Origin-Embedder-Policy: credentialless",
  "Cross-Origin-Opener-Policy: cross-origin",
  "Cross-Origin-Resource-Policy: cross-origin",
].filter(Boolean);
---

<!-- Security Headers via Meta Tags (fallback) -->{
  enableCSP && <meta http-equiv="Content-Security-Policy" content={cspHeader} />
}

{
  enableReferrerPolicy && (
    <meta name="referrer" content="strict-origin-when-cross-origin" />
  )
}

<!-- Feature Policy / Permissions Policy -->
<meta
  http-equiv="Permissions-Policy"
  content="geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=()"
/>

<!-- Additional Security Meta Tags -->
<meta http-equiv="X-Content-Type-Options" content="nosniff" />
<meta http-equiv="X-Frame-Options" content="DENY" />
<meta http-equiv="X-XSS-Protection" content="1; mode=block" />

<!-- Cross-Origin Policies -->
<meta http-equiv="Cross-Origin-Embedder-Policy" content="credentialless" />
<meta http-equiv="Cross-Origin-Opener-Policy" content="cross-origin" />
<meta http-equiv="Cross-Origin-Resource-Policy" content="cross-origin" />

<!-- HSTS Preload (solo en HTTPS) -->
{
  Astro.url.protocol === "https:" && (
    <meta
      http-equiv="Strict-Transport-Security"
      content="max-age=31536000; includeSubDomains; preload"
    />
  )
}

<!-- Inline script para generar archivo _headers dinámicamente -->
<script define:vars={{ securityHeaders }} is:inline>
  // Función para aplicar headers de seguridad en cliente
  if (typeof window !== "undefined") {
    // Aplicar CSP via JavaScript como fallback
    const meta = document.createElement("meta");
    meta.httpEquiv = "Content-Security-Policy";
    meta.content =
      securityHeaders
        .find((h) => h.startsWith("Content-Security-Policy:"))
        ?.replace("Content-Security-Policy: ", "") || "";
    if (meta.content) {
      document.head.appendChild(meta);
    }

    // Log de seguridad para debug
    console.log("🔒 Security headers aplicados:", securityHeaders.length);
  }
</script>

<!-- Comentario con instrucciones para _headers -->
<!-- 
Para aplicar estos headers correctamente:
1. Crear archivo public/_headers con contenido:

/*
{securityHeaders.map(header => `  ${header}`).join('\n')}

2. O configurar en el servidor web:
- Apache: .htaccess
- Nginx: server block  
- Cloudflare: Page Rules
- Vercel: vercel.json headers
-->

<style>
  /* Prevenir clickjacking con CSS */
  html {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Permitir selección en contenido específico */
  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  span,
  div,
  article,
  section {
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
    user-select: text;
  }

  /* Prevenir ataques de timing */
  button,
  input[type="submit"],
  input[type="button"] {
    pointer-events: auto;
  }

  /* Ocultar información sensible en modo desarrollo */
  [data-debug]:not(.production) {
    display: none !important;
  }
</style>
